// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id
  tipoIdentificacion TipoIdentificacion @default(CC) @map("tipo_identificacion")
  rol                Rol                @default(EMPLEADO)
  nombre             String
  apellido           String
  direccion          String
  contacto           String
  correo             String
  password           String
  venta              Venta[]

  @@map("usuarios")
}

model Cliente {
  id                 String             @id
  tipoIdentificacion TipoIdentificacion @default(CC) @map("tipo_identificacion")
  nombre             String
  apellido           String
  direccion          String
  contacto           String
  venta              Venta[]

  @@map("clientes")
}

enum Rol {
  EMPLEADO
  ADMIN
}

enum TipoIdentificacion {
  CC
  TI
  PAS
  NIT
}

model Proveedor {
  id        String @id @default(uuid())
  nombre    String
  empresa   String
  direccion String
  contacto  String
  correo    String

  @@map("proveedores")
}

model Categoria {
  id          String     @id @default(uuid())
  nombre      String     @unique
  descripcion String?
  Producto    Producto[]

  @@map("categorias")
}

model Producto {
  id               String         @id @default(uuid())
  codigoBarras     String         @unique
  nombre           String         @unique
  cantidadUnitaria String         @map("cantidad_unitaria")
  descripcion      String?
  precio           Int
  categoria        Categoria      @relation(fields: [categoriaId], references: [id])
  categoriaId      String
  Inventario       Inventario?
  detalleVenta     DetalleVenta[]

  @@map("productos")
}

model Inventario {
  id                  String   @id @default(uuid())
  stock               Int
  ultimaActualizacion DateTime @map("ultima_actualizacion")
  producto            Producto @relation(fields: [productoId], references: [id])
  productoId          String   @unique

  @@map("inventarios")
}

model Venta {
  id           String         @id @default(uuid())
  total        BigInt
  Cliente      Cliente?       @relation(fields: [clienteId], references: [id])
  clienteId    String?
  User         User           @relation(fields: [userId], references: [id])
  userId       String
  metodoPago   MetodoPago     @default(EFECTIVO) @map("metodo_pago")
  fecha        DateTime
  detalleVenta DetalleVenta[]

  @@map("ventas")
}

enum MetodoPago {
  EFECTIVO
  TARGETA
}

model DetalleVenta {
  id         String   @id @default(uuid())
  cantidad   Int
  subtotal   BigInt
  Venta      Venta    @relation(fields: [ventaId], references: [id])
  ventaId    String
  Producto   Producto @relation(fields: [productoId], references: [id])
  productoId String

  @@map("detalles_ventas")
}


